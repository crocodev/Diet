/*
	В SQLite базе хранятся следующие данные (эти классы связанны между собой):

	Класс Diet:
		startWeight - стартовый вес
		aimWeight - целевой вес
		currentWeight - текущий вес
		dayPoints - дн. норма оч.
		restDayPoints - остаток дн. оч.
		startDate - дата начала диеты

	Класс PointHistory:
		date - дата добавления
		foodName - название блюда
		points - количество очков

	Класс WeightHistory:
		date - дата добавления
		weight - вес
*/


/* 
Этот блок выполяняется при запуске приложения и после разворачивания приложения (когда оно было свернуто в "трей").
*/

switch (stage){  // Проверак на каком этапе диеты находится пользовтель
	case 1:
		if (weeksLeft: 2){ // Есои прошло две недели с момента начала диеты -> переход на второй этап, увеличение дн. нормы оч.
			NSLog(@"Вы перешли на второй этап, дневная норма увеличина");
			lastDate = [NSDate date]; // lastDate это не дата последнего запуска, это дата  когда в последний раз было обнаружено  что просло >= weaksNum
			stage = 2;
			dayPoints += 3;
		}
		break;
	case 2:
		 if (weeksLeft: 1){ // По прошествию недели увеличивается дн. норма оч.
			NSLog(@"Дневная норма увеличина");
			lastDate = [NSDate date];
			dayPoints += 3;
		}
		break;
	case 3:
		if (weeksLeft: 1){ // По прошествию недели увеличивается дн. норма оч.
			NSLog(@"Дневная норма увеличина");
			lastDate = [NSDate date];
			dayPoints += 6;
		}
		break;
}

/* 
Этот блок выполяняется при нажатии на кнопку "Добавить вес".
*/

switch (stage){ // Проверак на каком этапе диеты находится пользовтель
	case 1:
		if (newWeight <= aimWeight){
			NSLog(@"Вы достигли цели и перешли на четвертый этап");
			stage = 4;
		}
		break;
	case 2:
		if (newWeight <= aimWeight){
			NSLog(@"Вы достигли цели и перешли на четвертый этап");
			stage = 4;
		} else if (newWeight - aimWeight <= (aimWeight - startWeight) * 30 / 100 ){ // Проверка условия (осталось сбросить < 30% "общего сброса") перехода на 3 этап
			NSLog(@"Вы достигли цели и перешли на третий эиап, дневная норма увеличина");
			stage = 3;
			dayPoints += 6;
		} else if (averageWeekWeight >= averageWeekWeightLast){ // Тут проблема - как считать и делить данные на недели (пользователь может юзать прогу не ежедн.)
			NSLog(@"Вы набираете вес или достигли точки баланса, дневная норма уменьшена");
			dayPoints -= 2;
		}
		break;
	case 3:
		if (newWeight <= aimWeight){
			NSLog(@"Вы достигли цели и перешли на четвертый этап");
			stage = 4;
		} else if (averageWeekWeight >= averageWeekWeightLast){ // Тут проблема - как считать и делить данные на недели (пользователь может юзать прогу не ежедн.)
			NSLog(@"Вы набираете вес или достигли точки баланса, дневная норма уменьшена");
			dayPoints -= 2;
		}
		break;
	case 4:
		if (deltaWeekWeight < delataWeekWeightLast){
			NSLog(@"Дневная норма увеличена");
			dayPoints += 2;
		} else if (averageWeekWeight >= averageWeekWeightLast){ // Тут проблема - как считать и делить данные на недели (пользователь может юзать прогу не ежедн.)
			NSLog(@"Вы набираете вес или достигли точки баланса, дневная норма уменьшена");
			dayPoints -= 2;
		}
		break;
}

/* 
Вспомагательные методы.
*/

+ (NSInteger)daysBetweenDate:(NSDate*)fromDateTime andDate:(NSDate*)toDateTime
{
    NSDate *fromDate;
    NSDate *toDate;

    NSCalendar *calendar = [NSCalendar currentCalendar];

    [calendar rangeOfUnit:NSDayCalendarUnit startDate:&fromDate
        interval:NULL forDate:fromDateTime];
    [calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate
        interval:NULL forDate:toDateTime];

    NSDateComponents *difference = [calendar components:NSDayCalendarUnit
        fromDate:fromDate toDate:toDate options:0];

    return [difference day];
}



-(BOOL) weeksLeft: (int) weeksNum {
	return [self daysBetweenDate: lastDate andDate: [NSDate date]] > 7 * weeksNum ? YES : NO;
} 
